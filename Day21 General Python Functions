import random
import string

def generate_password(pw_length):
    characters = string.ascii_letters + string.digits + string.punctuation
    password = ''.join(random.choice(characters) for _ in range(pw_length))
    return password

try:
    password_length = int(input("Enter the password length: "))
    num_passwords = int(input("Enter the number of passwords: "))
    
    for _ in range(num_passwords):
        password = generate_password(password_length)
        print(password)

except ValueError:
    print("Invalid input. Please enter valid numbers for password length and number of passwords.")


#Timer , dynamic display of reducing time. 
import time

def timer(user_timer):
    while user_timer >= 0:
        mins, secs = divmod(user_timer, 60)
        timer_str = '{:02d}:{:02d}'.format(mins, secs)
        print(timer_str, end='\r')
        time.sleep(1)
        user_timer -= 1
    print('Countdown complete!')

if __name__ == '__main__':
    try:
        user_timer = int(input("Enter a time in seconds: "))
        timer(user_timer)
    except ValueError:
        print("Invalid input. Please enter a valid integer for the timer.")

#Factorial..
def factorial(num):
    if num == 0 or num == 1:
        return 1
    else:
        return num * factorial(num - 1)

if __name__ == "__main__":
    try:
        num = int(input("Enter the number: "))
        print("Number:", num)
        print("Factorial:", factorial(num))
    except ValueError:
        print("Invalid input. Please enter a valid integer.")


##Leap Year and days in month
def is_leap(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True  # Leap year
            else:
                return False  # Not a leap year
        else:
            return True  # Leap year
    else:
        return False  # Not a leap year

def days_in_month(year, month):
    month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

    if month == 2 and is_leap(year):
        month_days[month - 1] = 29
        return month_days[month - 1]
    else:
        return month_days[month - 1]

year = int(input("Enter a year: "))  # Enter a year
month = int(input("Enter a month: "))  # Enter a month
days = days_in_month(year, month)
print(days)


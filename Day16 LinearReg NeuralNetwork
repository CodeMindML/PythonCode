import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
import warnings

# # Ignore FutureWarnings
warnings.simplefilter(action='ignore', category=FutureWarning)

# # Load dataset
houseprice_df = pd.read_excel('HousePrice_Dataset.xlsx')
houseprice_df.head()

# # Checking input data shape & info
df = houseprice_df.copy()
print(df.shape)
print(df.info())
df.dropna()

# Convert categorical variable 'ocean_proximity' into dummy/indicator variables
df = pd.get_dummies(df, columns=['ocean_proximity'])
df.head()
# Assuming df contains your dataset with features and target variable
# X should contain features, and y should contain the target variable (house prices)

# # Separate features (X) and target variable (y)
X = df.drop('median_house_value', axis=1)
y = df['median_house_value']

# # Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

X_train.head()
X_test.head()

# # Standardize the features using StandardScaler
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

X_train.head()
X_test.head()


# # Build a neural network model
# model = Sequential()
# model.add(Dense(64, input_dim=X_train_scaled.shape[1], activation='relu'))
# model.add(Dense(1, activation='linear'))

# # Compile the model
# model.compile(optimizer='adam', loss='mean_squared_error')

# # Train the model
# model.fit(X_train_scaled, y_train, epochs=50, batch_size=32, validation_split=0.2, verbose=1)

# # Make predictions on the test set
# predictions = model.predict(X_test_scaled).flatten()

# # Evaluate the model
# mse = mean_squared_error(y_test, predictions)
# r2 = r2_score(y_test, predictions)

# # print(f'Mean Squared Error: {mse}')
# print(f'R-squared: {r2}')

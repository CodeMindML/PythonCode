# Merging Dictionaries
#Dictionaries are changeable, meaning that we can change, add or remove items after the dictionary has been created.
#Does not allow duplicates.

# Using the | operator
names_1 = {"Kelly": 23, "Derick": 14, "John": 7}
names_2 = {"Ravi": 45, "Mpho": 67}
merged_names = names_1 | names_2
print(merged_names)

# Using the ** unpacking operator
names_1 = {"Kelly": 23, "Derick": 14, "John": 7}
names_2 = {"Ravi": 45, "Mpho": 67}
merged_names = {**names_1, **names_2}
print(merged_names)
print(len(merged_names))
toDict = dict(name = "John", age = 36, country = "Norway")
print(toDict)

car = {
"brand": "Ford",
"model": "EcoSport",
"year": 2023
}

x = car.keys()
y = car.values()

print(x,y) #before the change

car["color"] = "white"

print(x) #after the change


#students scores.
student_scores = {
  "Harry": 81,
  "Ron": 78,
  "Hermione": 99, 
  "Draco": 74,
  "Neville": 62,
}

student_grades = {}


for student in student_scores:
  score = student_scores[student]
  if score > 90:
    student_grades[student] = "Outstanding"
  elif score > 80:
    student_grades[student] = "Exceeds Expectations"
  elif score > 70:
    student_grades[student] = "Acceptable"
  else:
    student_grades[student] = "Fail"
    
print(student_grades)

##Record management
country = input() # Add country name

visits = int(input("Input Visit: \n")) # Number of visits

list_of_cities = eval(input()) # create list from formatted string

travel_log = [
  {
    "country": "France",
    "visits": 12,
    "cities": ["Paris", "Lille", "Dijon"]
  },
  {
    "country": "Germany",
    "visits": 5,
    "cities": ["Berlin", "Hamburg", "Stuttgart"]
  },
]
# Do NOT change the code above ðŸ‘†

# TODO: Write the function that will allow new countries
# to be added to the travel_log. 


# Do not change the code below ðŸ‘‡
def add_new_country(country, visits, list_of_cities):
    new_country = {}
    new_country["country"] = country
    new_country["visits"] = visits
    new_country["cities"] = list_of_cities
    travel_log.append(new_country)

add_new_country(country, visits, list_of_cities)
 
print(f"I've been to {travel_log[2]['country']} {travel_log[2]['visits']} times.")
print(f"My favourite city was {travel_log[2]['cities'][0]}.")

##Bidding code
from replit import clear 
bids = {}
bidding_state = False
def highest_bidder(bids):
    highest_bid_price =0
    winner = ""
    
    for bid in bids:
        bid_price = bids[bid]
        if bid_price >= highest_bid_price:
            highest_bid_price = bid_price
            winner = bid
    print(f"WInner : {winner} , with bid price of : {highest_bid_price}" )    
        

while not bidding_state: 
    name = input("Enter your name \n")
    price = int(input("Enter the bid price \n"))
    bids[name] = price
    
    bid_continue = input("Are there and other bidders? Y or N \n")
    if bid_continue == "N":
        bidding_state = True
    else:
        clear()
highest_bidder(bids)
print(bids)

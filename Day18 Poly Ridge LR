from sklearn.linear_model import LinearRegression, Ridge
from sklearn.preprocessing import PolynomialFeatures, StandardScaler
from sklearn.metrics import r2_score

# Create PolynomialFeatures transformer (degree can be adjusted)
poly_features = PolynomialFeatures(degree=5)
X_train_poly = poly_features.fit_transform(x_train)
X_test_poly = poly_features.transform(x_test)

# Standardize the features using StandardScaler
scaler = StandardScaler()
X_train_poly_scaled = scaler.fit_transform(X_train_poly)
X_test_poly_scaled = scaler.transform(X_test_poly)

# Define the polynomial regression model
poly_reg_model = LinearRegression()

# Train the model
poly_reg_model.fit(X_train_poly_scaled, y_train)

# Make predictions on the test set
y_pred_LR_poly = poly_reg_model.predict(X_test_poly_scaled)

# Additional: Ridge Regression for regularization
ridge_model = Ridge(alpha=0.01)
ridge_model.fit(X_train_poly_scaled, y_train)
y_pred_ridge_poly = ridge_model.predict(X_test_poly_scaled)

# Evaluate the models
r2_LR_poly = r2_score(y_test, y_pred_LR_poly)
r2_ridge_poly = r2_score(y_test, y_pred_ridge_poly)

print(f'R-squared (Polynomial Regression): {r2_LR_poly}')
print(f'R-squared (Ridge Polynomial Regression): {r2_ridge_poly}')
